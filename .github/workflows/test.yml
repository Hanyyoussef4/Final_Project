name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fastapi_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          DATABASE_URL: postgresql://postgres:postgres@postgres:5432/fastapi_test_db
          TEST_DATABASE_URL: postgresql://postgres:postgres@postgres:5432/fastapi_test_db
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          playwright install  # if you use Playwright for e2e tests

      - name: Wait for Postgres
        run: |
          for i in {1..10}; do
            nc -z postgres 5432 && echo "Postgres is up!" && break
            echo "Waiting for Postgres..."
            sleep 3
          done

      - name: Run migrations
        run: |
          source venv/bin/activate
          alembic upgrade head

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@postgres:5432/fastapi_test_db
          TEST_DATABASE_URL: postgresql://postgres:postgres@postgres:5432/fastapi_test_db
        run: |
          source venv/bin/activate
          pytest tests/unit/ --cov=src --junitxml=test-results/junit.xml
          pytest tests/integration/
          pytest tests/e2e/

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build -t app:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'app:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  deploy:
    needs: security
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            hany25/module14:latest
            hany25/module14:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=hany25/module14:cache
          cache-to: type=inline,mode=max
